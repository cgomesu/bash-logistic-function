#!/bin/bash

#########################################################
# A logistic function in GNU bash and bc
#########################################################
# Author: cgomesu
# Repo: https://github.com/cgomesu/bash-logistic-function
#########################################################


# on error, call this function with a msg as arg for debugging
err () {
  if [[ $DEBUG = 'true' && -n "$1" ]]; then 
    echo '[logistic] There was an error: '"$1"
  fi; exit 1
}

############################################################
# The logistic function, f(x), has the following parameters:
# 
# x: value of a variable X
# m = x0: midpoint of X
# L: max value of f(x)
# k: growth rate
# 
# And is given by the equation:
#
# f(x) = L / {1 + e^[-k * (x - m)]},
#
# in which 'e' is Euler's constant.
#
# MORE INFO: https://en.wikipedia.org/wiki/logistic_function
############################################################
logistic () {
  local EQUATION; local OUTPUT
  EQUATION="output=($L)/(1+e(-($k)*(($x)-($m))))"
  if ! OUTPUT=$(echo "scale=$s;$EQUATION;scale=$S;output/1" | bc -lq 2>/dev/null); then 
    err 'Unable to eval the equation.'
  fi
  echo "$OUTPUT"; return 0
}

usage () {
  printf "\nUsage:\n  %s -x VALUE -m VALUE -L VALUE -k VALUE [OPTIONS]\n" "$0"
  printf "\n  Logistic function:\n"
  echo '    -x  real*  value of a variable X.'
  echo '    -m  real*  m = x0: Midpoint of X.'
  echo '    -L  real*  max value of f(x).'
  echo '    -k  real*  growth rate.'
  printf "\n  * acceptable real numbers:\n"
  echo '    integers:      ..., -1, 0, 1, ...'
  echo '    fractions:     ..., -1/2, -.25, 0, .25, 1/2, ...'
  echo '    exponentials:  ..., -(2^2), 0, 2^2, ...'
  echo '    square roots:  sqrt(VALUE)'
  echo '    natural logs:  l(VALUE)'
  echo '    natural exp:   e(VALUE)'
  printf "\n  Options:\n"
  echo '    -d       enable debug messages.'
  echo '    -h       show this help message.'
  echo '    -s  int  number of decimals to evaluate the equation. default: 20.'
  echo '    -S  int  number of decimals to output. default: 2.'
  printf "\n  Example:\n"
  echo '    logistic-function -x .5 -m 0 -L 1 -k 1 -s 10 -S 4'
  printf "\nAuthor: cgomesu\nRepo: https://github.com/cgomesu/bash-logistic-function\n"
}

defaults () {
  if [[ -z $DEBUG ]]; then DEBUG='false'; fi
  if [[ -z "$x" || -z "$m" || -z "$L" || -z "$k" ]]; then err 'Missing mandatory parameters.'; fi
  if [[ -z $s ]]; then s=20; fi
  if [[ -z $S ]]; then S=2; fi
}

validate_isreal () {
  if [[ -z "$1" || ! "$1" =~ ^(|\+|\-)(|sqrt|s|c|a|l|e|j)(|\()([0-9]+|[0-9]+(\.|\/|\^)[0-9]+|\.[0-9]+)(|\))$ ]]; then
    return 1
  else
    return 0
  fi
}

#####
# Run
#####
while getopts 'hdx:m:L:k:s:S:' OPT; do
  case ${OPT} in
    h)
      usage; exit 0
      ;;
    d)
      DEBUG='true'
      ;;
    x)
      x="$OPTARG"
      if ! validate_isreal "$x"; then err 'Invalid value for -x.'; fi
      ;;
    m)
      m="$OPTARG"
      if ! validate_isreal "$m"; then err 'Invalid value for -m.'; fi
      ;;
    L)
      L="$OPTARG"
      if ! validate_isreal "$L"; then err 'Invalid value for -L.'; fi
      ;;
    k)
      k="$OPTARG"
      if ! validate_isreal "$k"; then err 'Invalid value for -k.'; fi
      ;;
    s)
      s="$OPTARG"
      if ! validate_isreal "$s"; then err 'Invalid value for -s.'; fi
      ;;
    S)
      S="$OPTARG"
      if ! validate_isreal "$S"; then err 'Invalid value for -S.'; fi
      ;;
    \?)
      printf "\n!! INVALID OPTION !!\n"; usage; exit 1
      ;;
  esac
done

if ! command 2>/dev/null; then
  err 'Running command returns an error.'
elif [[ -z $(command -v bc 2>/dev/null) ]]; then
  err 'The GNU basic calculator (bc) is not installed or cannot be found in this users PATH.' 
fi

defaults
# logistic

exit 0