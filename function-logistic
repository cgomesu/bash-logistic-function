#!/bin/bash

#########################################################
# A logistic function in GNU bash and bc
#########################################################
# Author: cgomesu
# Repo: https://github.com/cgomesu/bash-logistic-function
#########################################################


# on error, call this function with a msg as arg for debugging
err () {
  if [[ $DEBUG = 'true' && -n "$1" ]]; then 
    echo '[logistic] There was an error: '"$1"
  fi;exit 1
}

############################################################
# The logistic function, f(x), has the following parameters:
# 
# x: value (real number) of a variable X
# m = x0: midpoint of X
# L: max value of f(x)
# k: the growth rate
# s: number of decimals in f(x), rounded down
# 
# And is given by the equation:
#
# f(x) = L / {1 + e^[-k*(x-m)]},
#
# in which 'e' is Euler's constant.
#
# MORE INFO: https://en.wikipedia.org/wiki/logistic_function
############################################################
logistic () {
  local EQUATION; local OUTPUT
  EQUATION="output=$L/(1+e(-$k*($x-$m)))"
  if ! OUTPUT=$(echo "$EQUATION;scale=$s;output/1" | bc -lq 2>/dev/null); then 
     err 'Unable to eval the equation.'
  fi
  echo "$OUTPUT"; return 0
}

usage () {
  printf "\nUsage:\n  %s [OPTIONS]\n\nOptions:\n" "$0"
  echo '  -x  int/flt  Value (real) of a random variable X'
  echo '  -h           Show this help message.'
  echo '  -d           Enable debug messages. Default: false.'
  printf "\nAuthor: cgomesu\nRepo: https://github.com/cgomesu/bash-logistic-function\n"
}

defaults () {
  if [[ -z $DEBUG ]]; then DEBUG='false'; fi
  if [[ -z $x || -z $m || -z $L || -z $k ]]; then err 'Missing mandatory parameters.'; fi
  if [[ -z $s ]]; then s=2; fi
}

# tests if an argument is a real number with proper format
# TODO: if bad format/style, fix it for the user
validate_isreal () {
  if [[ -n $1 ]]; then
    return 1
  # elif [[ condition ]]; then
  #   #statements
  fi
}

#####
# Run
#####
# TODO: add other options with x as template
while getopts 'dx:m:L:k:s:h' OPT; do
  case ${OPT} in
    d)
      DEBUG='true'
      ;;
    x)
      x="$OPTARG"
      # TODO: validate optarg with a regex
      if ! validate_isreal "$x"; then
        err 'Invalid option for -x.'
      fi
      ;;
    h)
      usage; exit 0
      ;;
    \?)
      printf "\n!! INVALID OPTION !!\n"; usage; exit 1
      ;;
  esac
done

if ! command 2>/dev/null; then
  err 'Running command returns an error.'
elif [[ -z $(command -v bc 2>/dev/null) ]]; then
  err 'The GNU basic calculator (bc) is not installed or cannot be found in this users PATH.' 
fi

defaults
# logistic

exit 0